{"version":3,"sources":["util.js","InfoBox.js","Map.js","Table.js","LineGraph.js","App.js","serviceWorker.js","index.js"],"names":["casesTypeColors","cases","hex","multiplier","recovered","deaths","sortData","data","sortedData","sort","a","b","InfoBox","title","total","active","isRed","props","Card","onclick","onClick","className","CardContent","Typography","color","Map","countries","casesType","center","zoom","TileLayer","url","attribution","map","country","Circle","countryInfo","lat","long","fillOpacity","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","numeral","format","showDataOnMap","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","LineGraph","useState","setData","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","useEffect","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","App","setCountry","setCountries","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","name","iso2","getCountriesData","onCountryChange","event","countryCode","target","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.27cd1473.chunk.js","sourcesContent":["import React from \"react\";\r\nimport numeral from \"numeral\";\r\nimport { Circle, Popup } from \"react-leaflet\";\r\n\r\n\r\nconst casesTypeColors = {\r\n    cases: {\r\n        hex: \"#CC1034\",\r\n        multiplier: 800,\r\n    },\r\n    recovered: {\r\n        hex: \"#7dd71d\",\r\n        multiplier: 1200,\r\n    },\r\n    deaths: {\r\n        hex: \"#fb4443\",\r\n        multiplier: 2000,\r\n    },\r\n};\r\n\r\n\r\nexport const sortData = (data) => {\r\n    const sortedData = [...data];\r\n\r\n    sortedData.sort((a, b) => {\r\n        if (a.cases > b.cases) {\r\n            return -1;\r\n        }\r\n        else {\r\n            return 1;\r\n        }\r\n    });\r\n\r\n    return sortedData;\r\n};\r\n\r\nexport const showDataOnMap = (data, casesType = \"cases\") =>\r\n    data.map( (country) => (\r\n        <Circle\r\n            center={[country.countryInfo.lat, country.countryInfo.long]}\r\n            color={casesTypeColors[casesType].hex}\r\n            fillOpacity={0.4}\r\n            fillColor={casesTypeColors[casesType].hex}\r\n            radius={\r\n                Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n            }\r\n        >\r\n            <Popup>\r\n                <div className=\"info-container\">\r\n                    <div\r\n                        className=\"info-flag\"\r\n                        style={{ backgroundImage: `url(${country.countryInfo.flag})` }}>\r\n                    </div>\r\n                    <div className=\"info-name\">\r\n                        {country.country}\r\n                    </div>\r\n                    <div className=\"info-confirmed\">\r\n                        Cases: {numeral(country.cases).format(\"0,0\")}\r\n                    </div>\r\n                    <div className=\"info-recovered\">\r\n                        Recovered: {numeral(country.recovered).format(\"0,0\")}\r\n                    </div>\r\n                    <div className=\"info-deaths\">\r\n                        Deaths: {numeral(country.deaths).format(\"0,0\")}\r\n                    </div>\r\n                </div>\r\n            </Popup>\r\n        </Circle>\r\n    ));\r\n\r\nexport const prettyPrintStat = (stat) =>\r\n    stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n","import React from \"react\";\r\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\r\n\r\nimport \"./InfoBox.css\";\r\n\r\nfunction InfoBox({ title, cases, total, active, isRed, ...props }) {\r\n    return (\r\n        <Card             \r\n            onclick = {props.onClick}\r\n            className={`infoBox ${active && \"infoBox--selected\"} ${isRed} && \"infoBox--red\"`}\r\n            >\r\n            <CardContent>\r\n                <Typography color=\"textSecondary\" className=\"infoBox__title\">\r\n                    {title}\r\n                </Typography>\r\n\r\n                <h2 className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`}>{cases === 0 ? {cases} : `+${cases}`}</h2>\r\n\r\n                <Typography color=\"textSecondary\" className=\"infoBox__total\">\r\n                    Total: {total} \r\n                </Typography>\r\n\r\n            </CardContent>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default InfoBox;\r\n","import React from 'react';\r\nimport { Map as LeafletMap, TileLayer } from \"react-leaflet\";\r\n\r\nimport \"./Map.css\";\r\nimport { showDataOnMap } from \"./util\";\r\n\r\nfunction Map({ countries, casesType, center, zoom }) {\r\n    return (\r\n        <div className=\"map\">\r\n            <LeafletMap center={center} zoom={zoom}>\r\n                <TileLayer\r\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                />\r\n                {/* drawing circles */}\r\n                {showDataOnMap(countries, casesType)}\r\n            </LeafletMap>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Map;\r\n","import React from \"react\";\r\nimport numeral from \"numeral\";\r\n\r\nimport \"./Table.css\";\r\n\r\nfunction Table({ countries }) {\r\n    return (\r\n        <div className=\"table\">\r\n            {\r\n                countries.map(({ country, cases }) => (\r\n                    <tr>\r\n                        <td>{country}</td>\r\n                        <td><strong>{numeral(cases).format(\"0,0\")}</strong></td>\r\n                    </tr>\r\n                )\r\n                )\r\n            };\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Table;","import React , { useState, useEffect } from 'react';\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\nimport \"./LineGraph.css\";\r\n\r\n\r\nconst options = {\r\n    legend: {\r\n      display: false,\r\n    },\r\n    elements: {\r\n      point: {\r\n        radius: 0,\r\n      },\r\n    },\r\n    maintainAspectRatio: false,\r\n    tooltips: {\r\n      mode: \"index\",\r\n      intersect: false,\r\n      callbacks: {\r\n        label: function (tooltipItem, data) {\r\n          return numeral(tooltipItem.value).format(\"+0,0\");\r\n        },\r\n      },\r\n    },\r\n    scales: {\r\n      xAxes: [\r\n        {\r\n          type: \"time\",\r\n          time: {\r\n            format: \"MM/DD/YY\",\r\n            tooltipFormat: \"ll\",\r\n          },\r\n        },\r\n      ],\r\n      yAxes: [\r\n        {\r\n          gridLines: {\r\n            display: false,\r\n          },\r\n          ticks: {\r\n            // Include a dollar sign in the ticks\r\n            callback: function (value, index, values) {\r\n              return numeral(value).format(\"0a\");\r\n            },\r\n          },\r\n        },\r\n      ],\r\n    },\r\n  };\r\n\r\n\r\n\r\nfunction LineGraph() {\r\n    const [data, setData] = useState({});\r\n\r\n    const buildChartData = (data, casesType=\"cases\") => {\r\n        const chartData = [];\r\n        let lastDataPoint;\r\n\r\n        for (let date in data.cases) {\r\n            if (lastDataPoint) {\r\n                const newDataPoint = {\r\n                    x: date,\r\n                    y: data[casesType][date] - lastDataPoint\r\n                }\r\n                chartData.push(newDataPoint);\r\n            }\r\n            lastDataPoint = data[casesType][date];\r\n        };\r\n\r\n        return chartData;\r\n    }\r\n\r\n    useEffect(() => {\r\n        const url = \"https://disease.sh/v3/covid-19/historical/all?lastdays=120\";\r\n        \r\n        const fetchData = async () => {\r\n\r\n            await fetch(url)\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                let chartData = buildChartData(data, \"cases\");\r\n                setData(chartData);\r\n            });\r\n\r\n        }\r\n\r\n        fetchData();\r\n\r\n    }, []);\r\n\r\n    \r\n\r\n    return (\r\n        <div className=\"lineGraph\">\r\n        {data?.length > 0 && (\r\n            <Line \r\n            data = {\r\n                {\r\n                    datasets: [\r\n                        {\r\n                            backgroundColor: \"rgba(204, 16, 52, 0.5)\",\r\n                            borderColor: \"#cc10034\",\r\n                            data: data\r\n                        }\r\n                    ]\r\n                }\r\n            }\r\n            options = { options }\r\n        />\r\n            \r\n\r\n\r\n        )}\r\n        \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LineGraph;\r\n","import React, { useEffect, useState } from 'react';\nimport {\n  FormControl,\n  Select,\n  MenuItem,\n  Card,\n  CardContent\n} from \"@material-ui/core\";\nimport numeral from \"numeral\";\n\nimport \"./App.css\";\nimport \"leaflet/dist/leaflet.css\";\nimport { sortData, prettyPrintStat } from \"./util.js\";\nimport InfoBox from \"./InfoBox\";\nimport Map from \"./Map\";\nimport Table from \"./Table\";\nimport LineGraph from \"./LineGraph\";\n\n\nfunction App() {\n\n  const [country, setCountry] = useState([\"worldwide\"]);\n  const [countries, setCountries] = useState([]);\n  const [countryInfo, setCountryInfo] = useState([]);\n  const [tableData, setTableData] = useState([]);\n  const [mapCenter, setMapCenter] = useState({\n    lat: 34.80746,\n    lng: -42.4796\n  });\n  const [mapZoom, setMapZoom] = useState(2);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n\n  useEffect(() => {\n\n    const url = \"https://disease.sh/v3/covid-19/all\";\n\n    fetch(url)\n      .then(response => response.json())\n      .then(data => {\n        setCountryInfo(data);\n      })\n\n  }, []);\n\n  useEffect(() => {\n    const getCountriesData = async () => {\n\n      const url = \"https://disease.sh/v3/covid-19/countries\";\n\n      await fetch(url)\n        .then((response) => response.json())\n        .then((data) => {\n\n          const countries = data.map((country) => (\n            {\n              name: country.country,\n              value: country.countryInfo.iso2\n            }\n          ));\n\n          let sortedData = sortData(data);\n\n          setCountries(countries);\n          setTableData(sortedData);\n          setMapCountries(data);\n        });\n    };\n\n    getCountriesData();\n\n\n  }, []);\n\n  const onCountryChange = async (event) => {\n    const countryCode = event.target.value;\n    setCountry(countryCode);\n\n    const url = countryCode === \"worldwide\"\n      ? \"https://disease.sh/v3/covid-19/all\"\n      : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\n    await fetch(url)\n      .then(response => response.json())\n      .then(data => {\n        setCountryInfo(data);\n        setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n        setMapZoom(4);\n      });\n  }\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n        <div className=\"app__header\">\n          <h1>Covid-19T</h1>\n\n          <FormControl className=\"app__dropdown\">\n            <Select variant=\"outlined\" value={country} onChange={onCountryChange}>\n              <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n              {\n                countries.map((country) => (\n                  <MenuItem value={country.value}>{country.name}</MenuItem>\n                ))\n              }\n            </Select>\n\n          </FormControl>\n\n        </div>\n\n        <div className=\"app__stats\">\n          <InfoBox\n            onClick={(e) => setCasesType(\"cases\")}\n            isRed\n            active={casesType === \"cases\"}\n            title=\"Cases\"\n            cases={countryInfo.todayCases}\n            total={numeral(countryInfo.cases).format(\"0.0a\")}\n          />\n\n          <InfoBox\n            onClick={(e) => setCasesType(\"recovered\")}\n            active={casesType === \"recovered\"}\n            title=\"Recovered\"\n            cases={countryInfo.todayRecovered}\n            total={numeral(countryInfo.cases).format(\"0.0a\")}\n          />\n\n          <InfoBox\n            onClick={(e) => setCasesType(\"deaths\")}\n            active={casesType === \"deaths\"}\n            title=\"Deaths\"\n            cases={countryInfo.todayDeaths}\n            total={numeral(countryInfo.cases).format(\"0.0a\")}\n          />\n        </div>\n\n        <Map\n          countries={mapCountries}\n          center={mapCenter}\n          zoom={mapZoom}\n          casesType={casesType}\n        />\n\n      </div>\n\n      <Card className=\".app__right\">\n        <CardContent>\n          <h3>Live Cases by Country</h3>\n          <Table countries={tableData} />\n\n          <h3>Worldwide new {casesType}</h3>\n          <LineGraph casesType={casesType} />\n        </CardContent>\n\n\n      </Card>\n\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}